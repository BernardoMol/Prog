@page "/Artistas"
@using Microsoft.AspNetCore.Authorization
@* @using ScreenSound.Web.Componentes *@
@inject ArtistasAPI artistasAPI
@* @attribute [Authorize] *@


<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Artistas cadastrados</MudText>
    <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
</MudStack>
@* <h3>Artist222as</h3> *@
@if(artistasPorPagina is not null)
{
    <MudGrid>
        @foreach (var artista in artistasPorPagina)
        {
            <MudItem xs="3">
                <CardArtista Artista="artista"/>
            </MudItem>
        }
    </MudGrid>

}

@code {
    private ICollection<ArtistaResponse>? artistas;
    private int tamanho = 8;
    private int totalItens;
    private int totalPaginas;
    private ICollection<ArtistaResponse>? artistasPorPagina;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            artistas = await artistasAPI.GetArtistasAsync();
            if (artistas is not null)
            {
                artistas = artistas.OrderByDescending(a => a.Id).ToList();
                totalItens = artistas.Count();
                totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
                this.PaginaMudou(1);
            }
            if (artistas == null || artistas.Count == 0)
            {
                Console.WriteLine("🚨 Nenhum artista retornado pela API.");
            }
            else
            {
                Console.WriteLine($"✅ {artistas.Count} artista(s) carregado(s).");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erro ao buscar artistas: {ex.Message}");
        }
    }

    private void PaginaMudou(int pageNumber)
    {
        var indice = pageNumber - 1;
        artistasPorPagina = artistas!
            .Skip(tamanho * indice)
            .Take(tamanho)
            .ToList();
    }
}