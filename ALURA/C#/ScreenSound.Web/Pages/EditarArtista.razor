@page "/EditarArtista/{NomeArtista}"
@inject ArtistasAPI artistasAPI
@inject NavigationManager navigationManager

<h3>Editar Artista</h3>
<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Artista</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
                      Variant="Variant.Outlined"
                      @bind-Value="nome"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
                      Variant="Variant.Outlined"
                      @bind-Value="biografia"
                      Lines="4"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <div class="d-flex justify-end mt-4" style="gap: 1rem;">
            <MudRating @bind-SelectedValue="Classificacao"
            @onclick="AvaliarArtista"/>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto"
                       @onclick="Editar">
                Salvar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                    @onclick="Deletar"
                    Color="Color.Secondary">
                Deletar
            </MudButton>

            <MudButton Variant="Variant.Filled"
                    @onclick="Voltar"
                    Color="Color.Tertiary">
                Voltar
            </MudButton>
        </div>

    </MudForm>
</MudPaper>

@code
{
    private string? nome;
    private string? biografia;
    private string? fotoPerfil;
    public int Classificacao { get; set; }

    [Parameter]
    public string? NomeArtista { get; set; }
    public ArtistaResponse? Artista { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Artista = await artistasAPI.GetArtistaPorNomeAsync(NomeArtista);
        if (Artista != null)
        {
            nome = Artista.Nome;
            biografia = Artista.Bio;
        }
    }
    
    private async Task Deletar()
    {
        await artistasAPI.DeleteArtistaAsync(Artista!.Id);
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task Editar()
    {
        var requestEdit = new ArtistaRequestEdit(Artista!.Id, nome!, biografia!, fotoPerfil);
        await artistasAPI.UpdateArtistaAsync(requestEdit);           
        navigationManager.NavigateTo("/Artistas");     
    }

    private void Voltar()
    {
        navigationManager.NavigateTo("/Home");
    }

    private async Task AvaliarArtista()
    {
            await artistasAPI.AvaliaArtistaAsync(Artista!.Id, Classificacao);
    }
}